#!/usr/bin/env python

"""
  Supernum is a pragmatic static site generator using jinja2 templates,
  reStructeredText or Markdown.

  Usage:
    supernum [-fh] [<workdir>] [-c <context>] [-t <templates>] [-i <index>] [-r <root>] [-b <build>]

  Options:
    <workdir>       Directory where the source files can be found. Defaults to the
                    current working directory.
    -c <context>    Filename of the main context file. Defaults to context.yaml.
    -t <templates>  Filename of the directory containing the template files.
                    Defaults to templates.
    -i <index>      Filename of the directory index file. Defaults to
                    index.html.
    -r <root>       Name of the folder containing the document root. Defaults to
                    root.
    -b <build>      Name of the ouput folder. Defaults to build.
    -f              Delete all contents of the build folder if exists without
                    asking.
    -h              Print this text.

"""

import os
import sys
from docopt import docopt
from clint.textui import colored, puts, indent
import yaml
import shutil
import markdown
from docutils.core import publish_parts
from jinja2 import Environment, PackageLoader, FileSystemLoader
from copy import deepcopy
import datetime

class Supernum(object):
    default_template = 'page.html'
    separator = '@@'

    decoders = {
        'rst': lambda x: publish_parts(x, writer_name='html')['html_body'],
        'md': lambda x: markdown.markdown(x.decode('utf-8')),
        'html': lambda x: x.decode('utf-8'),
    }

    def __init__(self, context='context.yaml', templates='templates',
        index='index.html', root='root', build='build', force=False):

        self.index = index
        self.root_dir = root
        self.build_dir = build
        self.force = force
        self.templates = templates

        # Create Jinja2 environment
        self.env = Environment(loader=FileSystemLoader(templates))

        # Load base context
        fd = open(context, 'rb')
        self.context = yaml.load(fd.read())
        fd.close()

        if self.context is None:
            self.context = {}

	self.load_globals()

    def load_globals(self):
	self.context.update({
            'today': datetime.date.today().strftime("%Y-%m-%d"),
        })


    def read(self, path):
        fd = open(path, 'rb')
        content = fd.read()
        fd.close()

        return content

    def write(self, path, content):
        fd = open(path, 'wb')
        fd.write(content)
        fd.close()

    def makedir(self, path):
        if os.path.exists(path):
            if not self.force:
                self.force = raw_input(path + ' exists. Contents will be deleted. Continue [yes/no]? ') == 'yes'
            if not self.force:
                sys.exit(0)

            shutil.rmtree(path)

        os.makedirs(path)

    def create_context(self, text):
        context = deepcopy(self.context)
        context.update(yaml.load(text))
	return context

    def parse_file(self, text, decoder):
	parts = text.split(self.separator)
        meta = parts.pop(0)
        blocks = []

	for part in parts:
            name = part[:part.index('\n')].strip()
            block = decoder(part[part.index('\n'):].strip())
            blocks.append((name, block))

        context = self.create_context(meta)

	return (context, blocks)

    def load_template(self, context):
 	filename = context.get('template', self.default_template)

	path = os.path.join(self.templates, filename)

        fd = file(path, 'rb')
        template = fd.read().decode('utf-8')
        fd.close()

	return template
	

    def create_template(self, extends, context, blocks):
        template  = "{%% extends '%s' %%}\n" % extends

	for block, content in blocks:
            template += '\n'
            template += '{%% block %s %%}\n' % block
            template += content
            template += '\n{% endblock %}'

	return template

    def render(self, content, decoder):
        context, blocks = self.parse_file(content, decoder)
 	extends = context.get('template', self.default_template)
	template = self.create_template(extends, context, blocks)

        return self.env.from_string(template).render(context).encode('utf-8')

    def render_yaml(self, content):
        context = self.create_context(content)
 	filename = context.get('template', self.default_template)
        template = self.env.get_template(filename)

        return template.render(context).encode('utf-8')

    def fabricate(self, src, dst):
        with indent(3, quote=colored.green('>> ')):
            puts(dst)

        filetype = src.split('.')[-1]

        fd = file(src, 'rb')
        content = fd.read()
        fd.close()

        if filetype == 'yaml':
            content = self.render_yaml(content)
            dst = dst[:-len(filetype)] + 'html'

	elif filetype in self.decoders.keys():
            decoder = self.decoders[filetype]
            content = self.render(content, decoder)
            dst = dst[:-len(filetype)] + 'html'

        self.write(dst, content)

    def walk(self):
        for base, dirs, files in os.walk(self.root_dir):
            output = self.build_dir + base[len(self.root_dir):]

            for d in dirs:
                self.makedir(os.path.join(output, d))

            for f in files:
                src = os.path.join(base, f)
                dst = os.path.join(output, f)
                
                self.fabricate(src, dst)

    def build(self):
        self.makedir(self.build_dir)
        self.walk()


if __name__ == '__main__':
    args = docopt(__doc__)

    if args['<workdir>']:
        os.chdir(args['<workdir>'])

    kwargs = {}
    for key in ['context', 'templates', 'root', 'build']:
        try:
            v = args['<' + key + '>']
        except KeyError:
            pass
        else:
            kwargs[key] = v

    if args['-f']:
        kwargs['force'] = True

    snum = Supernum(**kwargs)
    snum.build()
